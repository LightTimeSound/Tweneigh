{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PyTorch Autograd Tutorial\n",
    "\n",
    "Autograd is the automatic differentiation system in PyTorch that simplifies the computation of gradients for backpropagation during the training of neural networks. It tracks the operations performed on tensors to build a dynamic computational graph, which is then used to compute gradients with respect to the model's parameters.\n",
    "\n",
    "Here are some key concepts related to Autograd:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Computational Graph\n",
    "A directed graph that represents the sequence of operations performed on tensors during a forward pass. Each node in the graph corresponds to an operation, and the edges represent the flow of tensor data between the operations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. requires_grad\n",
    "A boolean attribute of tensors that indicates whether a tensor should track gradients for automatic differentiation. By default, it is set to False for input tensors and True for model parameters (e.g., weights and biases in a neural network)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. backward()\n",
    "A method available on scalar tensors that computes gradients for all tensors in the computational graph with requires_grad=True. Typically, this method is called on the scalar output of a loss function after the forward pass. It accumulates gradients in the .grad attribute of the tensors involved in the computation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Gradient accumulation\n",
    "When calling the backward() method multiple times without zeroing gradients, they will accumulate. This is useful for certain optimization techniques but can lead to unexpected behavior if not handled properly. Use the .zero_grad() method of an optimizer or manually set the .grad attribute to zero for tensors to prevent this accumulation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. .detach()\n",
    "A method that creates a new tensor without gradient tracking, sharing the same data as the original tensor. This is useful when you want to use a tensor's data for computations that should not be part of the computational graph."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. torch.no_grad()\n",
    "A context manager that temporarily disables gradient tracking for all tensors. This is useful when evaluating a model, as gradients are not needed and disabling tracking can improve performance and save memory."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, let's see an example of using Autograd to compute gradients for a simple function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "\n",
    "# Create a tensor with requires_grad=True\n",
    "x = torch.tensor(2.0, requires_grad=True)\n",
    "\n",
    "# Define a simple function:",
    "y = x ** 2\n",
    "\n",
    "# Call the backward() method to compute gradients\n",
    "y.backward()\n",
    "\n",
    "# Check the gradient: dy/dx = 2 * x = 2 * 2 = 4\n",
    "print(x.grad)  # Output: tensor(4.)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By understanding these concepts, you'll be able to leverage PyTorch's Autograd system to simplify gradient computations for your machine learning models."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

